#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mpi.h>

#define MAX_LINE_LENGTH 1024
#define MAX_STRING_LENGTH 5000
#define BUFFER_SIZE 10000

typedef struct {
    char *header;
    char *sequence;
} FastaSequence;

// Function prototypes
int read_fasta(const char *filename, FastaSequence **sequences);
int** compute_k_LCP(const char *seq1, const char *seq2, int k);

int main(int argc, char *argv[]) {
    int rank, size;
    FastaSequence *sequences = NULL;
    int num_sequences = 0;
    int k = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Rank 0 reads FASTA file and broadcasts metadata
    if (rank == 0) {
        if (argc != 3) {
            fprintf(stderr, "Usage: %s <fasta_file> <k>\n", argv[0]);
            MPI_Abort(MPI_COMM_WORLD, 1);
        }

        num_sequences = read_fasta(argv[1], &sequences);
        if (num_sequences < 0) {
            fprintf(stderr, "Error reading FASTA file.\n");
            MPI_Abort(MPI_COMM_WORLD, 1);
        }

        k = atoi(argv[2]);
        printf("Read %d sequences from FASTA file\n", num_sequences);
    }

    // Broadcast k and num_sequences to all ranks
    MPI_Bcast(&k, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&num_sequences, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Allocate sequences memory for non-root ranks
    if (rank != 0) {
        sequences = (FastaSequence *)calloc(num_sequences, sizeof(FastaSequence));
        for (int i = 0; i < num_sequences; i++) {
            sequences[i].header = (char *)malloc(MAX_LINE_LENGTH);
            sequences[i].sequence = (char *)malloc(MAX_STRING_LENGTH);
        }
    }

    // Broadcast sequence data to all ranks
    for (int i = 0; i < num_sequences; i++) {
        MPI_Bcast(sequences[i].header, MAX_LINE_LENGTH, MPI_CHAR, 0, MPI_COMM_WORLD);
        MPI_Bcast(sequences[i].sequence, MAX_STRING_LENGTH, MPI_CHAR, 0, MPI_COMM_WORLD);
    }

    // Allocate buffers for results
    char *local_result = (char *)calloc(BUFFER_SIZE, sizeof(char));
    char *global_result = NULL;
    if (rank == 0) {
        global_result = (char *)calloc(size * BUFFER_SIZE, sizeof(char));
    }

    // Compute LCP tables for assigned sequence pairs
    int total_pairs = (num_sequences * (num_sequences - 1)) / 2;
    for (int pair_idx = rank; pair_idx < total_pairs; pair_idx += size) {
        int i = 0, j = 1, remaining = pair_idx;
        while (remaining >= num_sequences - j) {
            remaining -= (num_sequences - j);
            i++;
            j = i + 1;
        }
        j += remaining;

        int **LCP = compute_k_LCP(sequences[i].sequence, sequences[j].sequence, k);
        if (!LCP) {
            fprintf(stderr, "Error computing LCP for %s and %s\n", sequences[i].header, sequences[j].header);
            MPI_Abort(MPI_COMM_WORLD, 1);
        }

        // Append results to local buffer
        char buffer[BUFFER_SIZE];
        snprintf(buffer, BUFFER_SIZE, "LCP Table for %s and %s:\n", sequences[i].header, sequences[j].header);
        strncat(local_result, buffer, BUFFER_SIZE - strlen(local_result) - 1);

        for (int row = 0; row < strlen(sequences[i].sequence); row++) {
            for (int col = 0; col < strlen(sequences[j].sequence); col++) {
                snprintf(buffer, BUFFER_SIZE, "%d ", LCP[row][col]);
                strncat(local_result, buffer, BUFFER_SIZE - strlen(local_result) - 1);
            }
            strncat(local_result, "\n", BUFFER_SIZE - strlen(local_result) - 1);
        }

        // Free LCP table memory
        for (int row = 0; row < strlen(sequences[i].sequence); row++) {
            free(LCP[row]);
        }
        free(LCP);
    }

    // Gather results from all ranks
    MPI_Gather(local_result, BUFFER_SIZE, MPI_CHAR, global_result, BUFFER_SIZE, MPI_CHAR, 0, MPI_COMM_WORLD);

    // Rank 0 writes results to file
    if (rank == 0) {
        FILE *result_file = fopen("result.txt", "w");
        if (!result_file) {
            fprintf(stderr, "Error opening result file\n");
            MPI_Abort(MPI_COMM_WORLD, 1);
        }
        for (int i = 0; i < size; i++) {
            fprintf(result_file, "%s", &global_result[i * BUFFER_SIZE]);
        }
        fclose(result_file);
        free(global_result);
    }

    // Cleanup allocated memory
    free(local_result);
    if (sequences) {
        for (int i = 0; i < num_sequences; i++) {
            free(sequences[i].sequence);
            free(sequences[i].header);
        }
        free(sequences);
    }

    MPI_Finalize();
    return 0;
}
